[{"/var/www/code/FSWD_FINAL/frontend/src/index.js":"1","/var/www/code/FSWD_FINAL/frontend/src/App.js":"2","/var/www/code/FSWD_FINAL/frontend/src/views/Login/LoginPage.js":"3","/var/www/code/FSWD_FINAL/frontend/src/views/signup/SignupPage.js":"4","/var/www/code/FSWD_FINAL/frontend/src/views/Login/LoginForm.js":"5","/var/www/code/FSWD_FINAL/frontend/src/views/signup/SignupForm.js":"6"},{"size":352,"mtime":1695319451990,"results":"7","hashOfConfig":"8"},{"size":367,"mtime":1695319609060,"results":"9","hashOfConfig":"8"},{"size":4333,"mtime":1695319659346,"results":"10","hashOfConfig":"8"},{"size":5590,"mtime":1695319659442,"results":"11","hashOfConfig":"8"},{"size":1262,"mtime":1695319659342,"results":"12","hashOfConfig":"8"},{"size":1490,"mtime":1695319659438,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"s3ehld",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/code/FSWD_FINAL/frontend/src/index.js",[],[],[],"/var/www/code/FSWD_FINAL/frontend/src/App.js",[],[],"/var/www/code/FSWD_FINAL/frontend/src/views/Login/LoginPage.js",["34","35","36","37"],[],"/var/www/code/FSWD_FINAL/frontend/src/views/signup/SignupPage.js",["38","39","40"],[],"import classes from \"./SignupPage.module.css\";\nimport SignupForm from \"./SignupForm\";\nimport Modal from \"../Modal/Modal\";\nimport { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  validateEmail,\n  validatePassword,\n  validateName,\n} from \"../../utils/validate\";\nimport { localStorageService } from \"../../services/LocalStorage.service\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction SignupPage() {\n  const navigate = useNavigate();\n\n  const [visible, setVisible] = useState(false);\n  const [loginInfo, setLoginInfo] = useState({\n    loggedIn: false,\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    role: \"user\",\n    rememberMe: false,\n    loginError: \"\",\n  });\n  //refactor\n  const handleVisibility = async (SignupData) => {\n    const info = {\n      loggedIn: true,\n\n      email: SignupData.email === \"\" ? \"Email required\" : SignupData.email,\n      password:\n        SignupData.password === \"\" ? \"Password required\" : SignupData.password,\n      name: SignupData.name === \"\" ? \"Name required\" : SignupData.name,\n\n      rememberMe: SignupData.rememberMe,\n      loginHeader: \"register successfull\",\n      loginMessage: \"you may be redirected to calendar\",\n    };\n    if (\n      SignupData.email === \"\" ||\n      SignupData.password === \"\" ||\n      SignupData.name === \"\"\n    ) {\n      info.loggedIn = false;\n      info.loginHeader = \"Register failed\";\n      info.loginMessage = \"Please fill in all required fields.\";\n      setLoginInfo(info);\n      setVisible(true); // Mostrar el modal con el mensaje de error\n      return; // Salir de la función ya que hay campos en blanco\n    }\n    //console.log(validateEmail(SignupData.email));\n    if (\n      SignupData &&\n      validateEmail(SignupData.email) &&\n      validatePassword(SignupData.password) &&\n      validateName(SignupData.name)\n      //setlogin info\n    )\n      try {\n        const response = await fetch(\"http://localhost:8000/auth/signup\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            email: SignupData.email,\n            password: SignupData.password,\n            name: SignupData.name,\n            role: \"user\",\n          }),\n        });\n\n        const data = await response.json();\n        console.log(data);\n        if (response.ok && SignupData.email !== \"\") {\n          console.log(SignupData.rememberMe);\n          if (SignupData.rememberMe) {\n            localStorageService.setItem(\"name\", SignupData.name);\n            localStorageService.setItem(\"email\", SignupData.email);\n            localStorageService.setItem(\"password\", SignupData.password);\n            localStorageService.setItem(\"rememberMe\", SignupData.rememberMe);\n          }\n\n          //redirección cuando pasen 3s\n\n          setTimeout(() => {\n            navigate(\"/login\");\n          }, 3000);\n        } else {\n          // Aquí puedes mostrar un mensaje de error o realizar cualquier otra acción apropiada\n          info.loggedIn = false;\n          info.loginHeader = \"Register failed\";\n          info.loginMessage = \"WTF\";\n          console.log(response.status);\n        }\n      } catch (error) {\n        {\n          info.loggedIn = false;\n          info.loginHeader = \"Register failed\";\n          info.loginMessage = \"wrong email or password\";\n          console.log(\"Register failed\");\n        }\n      }\n    setLoginInfo(info);\n\n    setVisible(!visible);\n  };\n\n  // //refactor\n  // const handleVisibility = (SignupData) => {\n  //   if (\n  //     SignupData &&\n  //     validateEmail(SignupData.email) &&\n  //     validateEmail.password(SignupData.password)\n  //   ) {\n  //     setLoginInfo({\n  //       loggedIn: true,\n  //       email: SignupData.email,\n  //       password: SignupData.password,\n  //       rememberMe: SignupData.rememberMe,\n  //       loginHeader: \"login successfull\",\n  //       loginMessage: \"you have been looged successfully\",\n  //     });\n  //     console.log(\"login successfully\");\n  //   } else {\n  //     setLoginInfo({\n  //       loggedIn: false,\n  //       email: SignupData.email,\n  //       password: SignupData.password,\n  //       rememberMe: SignupData.rememberMe,\n  //       loginHeader: \"login failed\",\n  //       loginMessage: \"error email or password\",\n  //     });\n  //     console.log(\"login failed\");\n  //   }\n  //   setVisible(!visible);\n  // };\n\n  return (\n    <>\n      {/* creamos el portal y lo asignamos */}\n      {ReactDOM.createPortal(\n        <Modal visible={visible} onLogin={handleVisibility} data={loginInfo} />,\n        document.querySelector(\"#modal\")\n      )}\n      <div className={classes.container}>\n        <div className={classes.formContainer}>\n          <div className={classes.formWrapper}>\n            <div className={classes.passwordrequirements}>\n              <p>La contraseña debe cumplir con los siguientes requisitos:</p>\n              <ul className={classes.noBullets}>\n                <li>Incluir al menos una letra minúscula.</li>\n                <li>Incluir al menos una letra mayúscula.</li>\n                <li>Incluir al menos un número.</li>\n                <li>Incluir al menos un símbolo especial.</li>\n              </ul>\n            </div>\n\n            <div className={classes[\"login-links\"]}>\n              <a onClick={() => navigate(\"/login\")}>Login</a>\n              <a href=\"#\" className={classes.active}>\n                Register\n              </a>\n            </div>\n            <SignupForm onSignup={handleVisibility} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default SignupPage;\n","/var/www/code/FSWD_FINAL/frontend/src/views/Login/LoginForm.js",[],[],"/var/www/code/FSWD_FINAL/frontend/src/views/signup/SignupForm.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":21,"column":10,"nodeType":"43","messageId":"44","endLine":21,"endColumn":17},{"ruleId":"45","severity":1,"message":"46","line":89,"column":7,"nodeType":"47","messageId":"48","endLine":94,"endColumn":8},{"ruleId":"49","severity":1,"message":"50","line":118,"column":15,"nodeType":"51","endLine":118,"endColumn":54},{"ruleId":"49","severity":1,"message":"52","line":121,"column":15,"nodeType":"51","endLine":121,"endColumn":56},{"ruleId":"45","severity":1,"message":"46","line":99,"column":9,"nodeType":"47","messageId":"48","endLine":104,"endColumn":10},{"ruleId":"49","severity":1,"message":"52","line":162,"column":15,"nodeType":"51","endLine":162,"endColumn":53},{"ruleId":"49","severity":1,"message":"50","line":163,"column":15,"nodeType":"51","endLine":163,"endColumn":54},"no-unused-vars","'pending' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md"]